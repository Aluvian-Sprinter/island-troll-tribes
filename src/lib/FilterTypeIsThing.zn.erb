
library FilterTypeIsThing requires ID, PublicLibrary   {

<%  @ids.each do |id, _| %>
<%    if id =~ /^ITEM_/ || id =~ /^UNIT_/ || id =~ /^DEST_/ %>
<%       type  = id.split('_').first.capitalize %>
<%       thing = id.split('_')[1,99].join('_').downcase.camelize %>
<%       if type == "Dest" then type = "Destructable" end %>
  public function Filter<%= type %>Is<%= thing %>() -> boolean {
    return Get<%= type %>TypeId(GetFilter<%= type %>()) == <%= id %> && GetWidgetLife(GetFilter<%= type %>()) > 0;
  }

<%    end %>
<%  end %>

  public function FilterItemIsPole() -> boolean {
    return FilterItemIsStick() || FilterItemIsBone();
  }

  public function FilterItemIsBaseShield() -> boolean {
    return checkBaseShield(GetFilterItem()) && GetWidgetLife(GetFilterItem()) > 0;
  }

  public function FilterItemIsBaseBoots() -> boolean {
    return checkBaseBoots(GetFilterItem()) && GetWidgetLife(GetFilterItem()) > 0;
  }

  public function FilterItemIsBaseGloves() -> boolean {
    return checkBaseGloves(GetFilterItem()) && GetWidgetLife(GetFilterItem()) > 0;
  }

  public function FilterItemIsBaseCoat() -> boolean {
    return checkBaseCoat(GetFilterItem()) && GetWidgetLife(GetFilterItem()) > 0;
  }

  public function FilterItemIsHide() -> boolean {
    return checkHide(GetFilterItem()) && GetWidgetLife(GetFilterItem()) > 0;
  }

  public function FilterUnitIsCorpse() -> boolean {
    return GetUnitTypeId(GetFilterUnit()) == UNIT_MEAT;
  }

}
