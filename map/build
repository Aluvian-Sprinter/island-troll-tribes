#!/usr/bin/env ruby

require 'fileutils'

WIN_OS = RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/
MAC_OS = RbConfig::CONFIG['host_os'] =~ /darwin/ ? true : false
puts "Detected mac OS........prefixing exe calls with wine" if MAC_OS
puts "Detected windows os....prefixing system calls with sh -c" if WIN_OS

CWD = Dir.getwd
DIR = File.dirname(__FILE__)

JASSHELPER_PATH = File.join %W[tools 0.A.2.B.jasshelper executable clijasshelper.exe]
OPTIMIZER_DIR   = File.join %W[tools 5.0wc3mapoptimizer]
OPTIMIZER_PATH  = File.join %W[#{OPTIMIZER_DIR} VXJWTSOPT.exe]
WIDGETIZER_DIR  = File.join %W[tools 1.9.0.3widgetizer]
WIDGETIZER_PATH = File.join %W[#{WIDGETIZER_DIR} BatWidgetizer.exe]
BLIZZARD_J_PATH = File.join %W[tools blizzard.j]
COMMON_J_PATH   = File.join %W[tools common.j]

def do_compile
  wd = Dir.getwd
  Dir.chdir '..'
  cmd = "#{'ruby ' if WIN_OS}./compile do_jasshelper:false #{$opt[:do_compile].is_a?(Hash) ? $opt[:do_compile].inject([]){|i,v|i<<"'"+v[0].to_s+":"+v[1].to_s+"'"}.join(' ') : nil}"
  puts cmd if $opt[:debug_script]
  r = `#{cmd}`
  Dir.chdir wd
  r
end

def do_jasshelper
  cmd = "#{"sh -c \"" if WIN_OS}#{'wine ' if MAC_OS}'#{JASSHELPER_PATH}' #{"--debug" if $opt[:debug]} #{"--scriptonly" if $opt[:script_only]} #{"--nooptimize" if $opt[:no_optimize]} '#{COMMON_J_PATH}' '#{BLIZZARD_J_PATH}' '#{$opt[:map_script_path] || $opt[:script_only][:path]}' '#{$opt[:map_unpro_path] || "out_"+$opt[:script_only][:path]}'#{"\"" if WIN_OS}"
  puts cmd if $opt[:debug_script]
  `#{cmd}`
end

def do_optimizer
  cmd = "#{"sh -c \"" if WIN_OS}#{'wine ' if MAC_OS}'#{OPTIMIZER_PATH}' '#{$opt[:map_unpro_path]}' --do '#{$opt[:map_output_path]}' --checkall --tweak '#{File.join(%W[#{OPTIMIZER_DIR} settings.vxtweak])}' --exit#{"\"" if WIN_OS}"
  puts cmd if $opt[:debug_script]
  `#{cmd}`
end

def do_widgetizer
  cmd = "#{"sh -c \"" if WIN_OS}#{'wine ' if MAC_OS}'#{WIDGETIZER_PATH}' '#{$opt[:map_unpro_path]}' '#{File.join(%W[#{WIDGETIZER_DIR} Widgetizer.ini])}'#{"\"" if WIN_OS}"
  puts cmd if $opt[:debug_script]
  `#{cmd}`
end

def do_setup_unpro_map 
  Dir.mkdir 'compiled-maps' unless File.exists? 'compiled-maps'
  FileUtils.cp $opt[:map_unpro_path], ($opt[:map_unpro_path] = "#{$opt[:map_output_path]}.tmp.w3x")
end

def do_exit
  exit
end

def do_build
  do_setup_unpro_map
  if $opt[:do_compile]
    print "Compiling map script..."
    a = do_compile
    puts a if $opt[:debug_script]
    if $? != 0
      puts "compile error: #{$?.to_i}"
      do_exit
    end
    puts "done"
  end
  if $opt[:do_jasshelper]
    print "Executing jasshelper..."
    out = do_jasshelper
    if $?.to_i != 0
      puts "jasshelper error: #{$?}"
      puts out
      do_exit
    elsif !($opt[:do_optimizer] || $opt[:do_widgetizer])
      FileUtils.mv $opt[:map_unpro_path], $opt[:map_output_path]
    end
    puts "done"
  end
  if $opt[:do_widgetizer]
    print "Widgetizing............"
    do_widgetizer
    if $?.to_i != 0
      puts "widgetizer error: #{$?}"
      do_exit
    elsif !$opt[:do_optimizer]
      FileUtils.mv $opt[:map_unpro_path], $opt[:map_output_path]
    end
    puts "done"
  end
  if $opt[:do_optimizer]
    print "Optimizing............."
    do_optimizer
    if $?.to_i != 0
      puts "optimizer error: #{$?}"
      do_exit
    end
    puts "done"
  end
  puts "Finished building map!"
  do_exit
end

def extract_options(a)
  r = {}
  a.each do |i|
    o, v = i.split(':')
    r[o.to_sym] = v
  end
  r
end

def main
  Dir.chdir DIR

  $opt = extract_options ARGV
  $opt.merge!({
    :debug_script    => $opt[:debug_script]    ? eval($opt[:debug_script])  : false,
    :do_jasshelper   => $opt[:do_jasshelper]   ? eval($opt[:do_jasshelper]) : true,
    :do_compile      => $opt[:do_compile]      ? eval($opt[:do_compile])    : true,
    :do_optimizer    => $opt[:do_optimizer]    ? eval($opt[:do_optimizer])  : true,
    :do_widgetizer   => $opt[:do_widgetizer]   ? eval($opt[:do_widgetizer]) : false,
    :no_optimize     => $opt[:no_optimize]     ? eval($opt[:no_optimize])   : false,
    :debug           => $opt[:debug]           ? eval($opt[:debug])         : false,
    :script_only     => $opt[:script_only]     ? eval($opt[:script_only])   : false,
    :map_unpro_path  => $opt[:map_unpro_path]  ? File.expand_path($opt[:map_unpro_path])  : Dir.glob(File.join(%W[base-maps *.w3x])).sort.reverse.first,
    :map_script_path => $opt[:map_script_path] ? File.expand_path($opt[:map_script_path]) : File.join(%W[.. out.j]),
    :map_output_path => $opt[:map_output_path] ? File.expand_path($opt[:map_output_path]) : File.join(%W[compiled-maps ITT_#{`git log -1 --pretty=oneline`[/\A\w*/].strip}_#{Time.now.to_i}.w3x])
  })

  if $opt[:env] == 'beta'
    $opt.merge!({
      :debug => true
    })
  elsif $opt[:env] == 'optimized'
    $opt.merge!({
      :debug => false
    })
  elsif $opt[:env] == 'pro'
    $opt.merge!({
      :debug => false,
      :do_widgetizer => true
    })
  elsif $opt[:env] == 'WEC' # World Editor Compatible
    $opt.merge!({
      :debug => true,
      :do_widgetizer => false,
      :do_optimizer => false,
      :do_compile => {:do_jasshelper => false}
    })
  end

  p $opt if $opt[:debug_script]

  do_build
end

main
